# syntax=docker/dockerfile:1.4

ARG USERNAME="${USERNAME:-hikaru}"
ARG CONTAINER_ID="${CONTAINER_ID:-orora-cli}"

FROM alpine:latest as orora-files

RUN \
    apk update && \
    apk add --no-cache \
    bash \
    curl \
    git \
    sudo \
    wget

COPY toolboxes/orora-cli/files /tmp/files
COPY toolboxes/orora-cli/base-packages \
    toolboxes/orora-cli/extra-packages \
    toolboxes/orora-cli/scripts \
    /tmp/

# Construct the packages file
RUN grep -v '^#' /tmp/base-packages >> /tmp/packages && \
    grep -v '^#' /tmp/extra-packages >> /tmp/packages

RUN \
    # Get Distrobox-host-exec
    git clone https://github.com/89luca89/distrobox.git --single-branch /tmp/distrobox && \
    cp /tmp/distrobox/distrobox-host-exec /usr/bin/distrobox-host-exec && \
    cp /tmp/distrobox/distrobox-export /usr/bin/distrobox-export && \
    cp /tmp/distrobox/distrobox-init /usr/bin/entrypoint && \
    # Get host-spawn
    wget https://github.com/1player/host-spawn/releases/download/$(cat /tmp/distrobox/distrobox-host-exec | grep host_spawn_version= | cut -d "\"" -f 2)/host-spawn-$(uname -m) -O /usr/bin/host-spawn && \
    chmod +x /usr/bin/host-spawn && \
    rm -rf /tmp/distrobox && \
    ln -fs /bin/sh /usr/bin/sh && \
    # Link programs from host
    mkdir -p /usr/local/bin  && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/ujust && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak && \ 
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/transactional-update

# ============================================================================================= #
# INSTALLER
# ============================================================================================= #

FROM quay.io/toolbx-images/alpine-toolbox:edge as installer
LABEL maintainer="lecoqjacob@gmail.com" \
    com.github.containers.toolbox="true" \
    summary="A cloud-native terminal experience" \
    usage="This image is meant to be used with the toolbox or distrobox command"

ARG USERNAME
ARG CONTAINER_ID

USER root
WORKDIR /
ENV PATH="/root/.cargo/bin:${PATH}"

# ================================= #

COPY --from=orora-files /tmp /tmp

RUN \
    --mount=type=cache,target=/var/cache/apk \
    /tmp/setup-apk.sh && \
    apk update && apk upgrade && \
    grep -v '^#' /tmp/packages | xargs apk add --no-cache --update && \
    rm -rf /tmp/extra-packages /tmp/setup-apk.sh

# ============================================================================================= #
# BUILDER
# ============================================================================================= #

FROM installer as builder
ARG USERNAME
ARG CONTAINER_ID

# change distrobox cache dir to keep distrobox and host fontconfig caches separate
# prevents fonts from breaking between host and container due to changing paths
RUN echo 'export XDG_CACHE_HOME="$HOME/.cache-distrobox"' > /etc/profile.d/cache-home.sh

# ================================================
# utilities installation
# ================================================

# Include utilities available in the melange SDK
RUN \
    --mount=type=cache,target=/var/cache/utilities \
    cd /tmp && \
    export PATH="/tmp/go/bin:${PATH}" && \
    # go setup
    export GOPATH="/tmp/go" && \
    mkdir -p "${GOPATH}" && \
    # goimports
    go install golang.org/x/tools/cmd/goimports@latest && \
    mkdir -p "/usr/bin" && \
    mv "${GOPATH}/bin/goimports" "/usr/bin" && \
    # melange
    git clone https://github.com/chainguard-dev/melange.git && \
    (cd melange && make melange install) && \
    # apko
    git clone https://github.com/chainguard-dev/apko.git && \
    (cd apko && make apko install) && \
    # yam
    git clone https://github.com/chainguard-dev/yam.git && \
    (cd yam && go build -v -o "/usr/bin/yam") && \
    cd / && \
    rm -rf /tmp/*

# ============================================================================================= #
# ORORA_CLI
# ============================================================================================= #

FROM builder as orora-cli

ARG USERNAME
ARG CONTAINER_ID

# Setup su-exec and fake sudo
RUN [ -e /sbin/su-exec ] && \
    chmod u+s /sbin/su-exec && \
    [ ! -e /usr/bin/sudo ] && \
    printf "%s\n%s" '#!/bin/sh' '/sbin/su-exec root "$@"' > /usr/bin/sudo && \
    chmod +x /usr/bin/sudo || true

# Use and configure bash, retrieve bash-prexec
RUN curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o /tmp/bash-prexec && \
    mkdir -p /usr/share/ && \
    cp /tmp/bash-prexec /usr/share/bash-prexec && \
    rm -rf /tmp/bash-prexec

COPY --from=orora-files /usr/local/bin/ /usr/local/bin/
COPY --from=orora-files /usr/bin /usr/bin/
COPY --from=orora-files /tmp/files /

RUN \
    useradd -ms /bin/bash "${USERNAME}" && \
    echo -e "${USERNAME} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME} && \
    # Change user shell to FISH
    chsh --shell /usr/bin/fish ${USERNAME}

# Patch /usr/bin/entrypoint
RUN sed -i '/missing_packages=0/,/# Set SHELL to the install path inside the container/ s/^/#/' /usr/bin/entrypoint && \
    sed -i '/# Set SHELL to the install path inside the container/a touch /.containersetupdone' /usr/bin/entrypoint && \
    # Change root shell to FISH
    sed -i -e '/^root/s/\/bin\/ash/\/usr\/bin\/fish/' /etc/passwd

# ==========
# USER
# ==========
USER ${USERNAME}
WORKDIR /var/home/${USERNAME}

# Export programs
RUN mkdir -p ~/.local/bin/ && \
    CONTAINER_ID=${CONTAINER_ID} distrobox-export --bin /usr/bin/nvim

# Cleanup
RUN rm -rf \
    /tmp/*